package com.noxtech.games.boardgamedecider;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) throws IOException {
        int numPlayers = 4;

        File csvFile = new File(App.class.getClassLoader().getResource("boardgames.csv").getFile());
        CsvMapper mapper = new CsvMapper();
        CsvSchema schema = new CsvMapper().schemaFor(BoardGame.class);
        MappingIterator<BoardGame> it = mapper.readerFor(BoardGame.class).with(schema).readValues(csvFile);
        List<BoardGame> games = it.readAll().stream().filter(boardGame -> boardGame.getMaxPlayers() >= numPlayers).collect(Collectors.toList());

        List<Integer> choices = new ArrayList<>();

        choices.add(addChoice(choices, games.size()));
        if (games.size() >= 3) {
            choices.add(addChoice(choices, games.size()));
            choices.add(addChoice(choices, games.size()));
        }

        for (int choice : choices) {
            System.out.println(games.get(choice));
        }
    }

    private static Integer addChoice(List<Integer> choices, int size) {
        int i;
        do {
            i = new Random().nextInt(size);
        } while (choices.contains(i));

        return i;
    }
}
